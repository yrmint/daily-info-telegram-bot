import datetime
import logging
import pytz

from telegram.ext import Updater, CommandHandler

import config
import jokes
import weather

TOKEN = config.TOKEN
CHAT_ID = config.CHAT_ID
TIME = config.TIME

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger()


def start(update, context):
    """greet the user - todo"""
    context.bot.send_message(chat_id=update.message.chat_id, text="start message")


def set_timer(update, context):
    """add daily message to queue"""
    context.bot.send_message(chat_id=update.message.chat_id, text=f"üñ§ —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤"
                                                                  f" {TIME}:00 üñ§")
    job = context.job_queue.run_daily(send_daily_message, time=datetime.time(hour=TIME, minute=00,
                                                                             tzinfo=pytz.timezone('Europe/Moscow')),
                                      days=(0, 1, 2, 3, 4, 5, 6))
    context.chat_data['send_daily_message'] = job


def send_daily_message(context):
    """send daily message"""
    message = ""
    if 6 <= TIME <= 11:
        message += "‚òÄ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄ\n\n"
    elif 12 <= TIME <= 17:
        message += "‚òÄ –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! ‚òÄ\n\n"
    elif 18 <= TIME <= 21:
        message += "üåô –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô\n\n"
    else:
        message += "üåô –¥–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô\n\n"

    message += f"—Å–µ–≥–æ–¥–Ω—è {datetime.datetime.now().day} {config.MONTHS[datetime.datetime.now().month - 1]}. " \
               f"–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {weather.get_weather()}\n\n" \
               f"–∞–Ω–µ–∫–¥–æ—Ç –¥–Ω—è:\n{jokes.get_joke()}\n\n" \
               f"—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üñ§"
    context.bot.send_message(chat_id=CHAT_ID, text=message)


def send_weather(context):
    """send weather forecast"""
    message = f"–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {weather.get_weather()}"
    context.bot.send_message(chat_id=CHAT_ID, text=message)


def stop_notify(update, context):
    """stop daily messages"""
    chat_id = update.message.chat_id
    job = context.chat_data.get('send_daily_message')
    if job:
        job.schedule_removal()
        del context.chat_data['send_daily_message']
        context.bot.send_message(chat_id=chat_id, text="üåô –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã üåô")
    else:
        context.bot.send_message(chat_id=chat_id, text="–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")


def error(update, context):
    """log errors caused by updates"""
    logger.warning(f'update {update} caused error {context.error}')


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('set_timer', set_timer))
    dp.add_handler(CommandHandler('stop', stop_notify))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
